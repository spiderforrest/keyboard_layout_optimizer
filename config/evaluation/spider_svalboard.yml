# layout metrics
metrics:
  kla_same_finger_words:
    enabled: true
    weight: 3.5
    normalization:
      type: weight_all
      value: 1.0
    params:
      words_filename: "./english-words-30000.csv"
      min_word_length: 3

  # Distance metric that tries to resemble the one on klanext.keyboard-design.com
  kla_distance:
    enabled: false
    weight: 0.44 # 40 weight * 0.0011 penalty * 10 ?
    normalization:
      type: weight_all
      value: 1.0
    params:
      ignore_modifiers: true
      keyup_distance: 3.5
      keydown_distance: 3.5
      dscoring:
        Left:
          Pinky: 3.67
          Ring: 2.9
          Middle: 2.0
          Index: 1.85
          Thumb: 1.0
        Right:
          Pinky: 3.67
          Ring: 2.9
          Middle: 2.0
          Index: 1.85
          Thumb: 1.0

      hscoring:
        Left: 1.1
        Right: 1.0

  # Specified symbols shall be located within the leftmost "n" columns of the left hand
  shortcut_keys:
    enabled: false
    weight: 0.35
    normalization:
      type: fixed
      value: 1.0
    params:
      # symbols that shall be considered "shortcut keys"
      shortcut_chars: cvx
      cost: 1.0
      within_n_leftmost_cols: 5


  # Each finger's load shall be relative to the specified weights
  finger_balance:
    enabled: true
    weight: 500.0
    normalization:
      type: fixed
      value: 1.0
    params:
      # Intended factors for finger load. Thumb values are ignored.
      intended_loads:
        [Left, Pinky]: 1.0
        [Left, Ring]: 1.6
        [Left, Middle]: 2.0
        [Left, Index]: 2.0
        [Left, Thumb]: 2.0
        [Right, Thumb]: 2.0
        [Right, Index]: 2.0
        [Right, Middle]: 2.0
        [Right, Ring]: 1.6
        [Right, Pinky]: 1.0

  # Each hand's load shall be close to 50%
  hand_disbalance:
    enabled: true
    weight: 300.0 # devorak gave me cptsd
    normalization:
      type: fixed
      value: 1.0
    params:
      null: null

  # Each keystroke incurs a cost (defined in the keyboard's layout config)
  key_costs:
    enabled: true
    weight: 20.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      null: null

  # Informational metric computing loads per row
  row_loads:
    enabled: true
    weight: 0.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      null: null

  modifier_usage:
    enabled: true
    weight: 100.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      hold_cost: 1.0
      one_shot_cost: 0.0
      long_press_cost: 1.0

  # bigram metrics

  # If the keys corresponding to a bigram are not symmetrical on left and right hand, a cost is
  # counted.
  symmetric_handswitches:
    enabled: false
    weight: 3.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      null: null

  # If both keys corresponding to a bigram belong to the same finger, a cost is counted.
  # The cost can be weighted by the individual keys and if they are performed by stretching
  # or curling the finger. Also accounted for is whether there is lateral or in-line movement.
  finger_repeats:
    enabled: true
      # this is honestly the single most important metric for this board, I think
    weight: 900.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      # Finger-individual weights to be multiplied with the cost
      finger_factors:
        Thumb: 1.2
        Index: 0.8
        Middle: 1.2
        Ring: 1.4
        Pinky: 1.6
      # Factor applied if the repeat consists of a movement
      # in line of the finger "outwards", i.e. by stretching the finger
      stretch_factor: 1.3
      # Factor applied if the repeat consists of a movement
      # in line of the finger "inwards", i.e. by curling the finger
      curl_factor: 1.1
      # Factor applied if the repeat consists of a lateral movement
      lateral_factor: 1.4

      # Cost to apply if the finger repeat happens on the same key
        # these aren't better on the svalboard
      same_key_offset: 1

  # Depending on which fingers of the same hand are used to hit the keys of a bigram,
  # how many rows were crossed and in which direction the movement occurs, costs are
  # counted.
  movement_pattern:
    enabled: true
    weight: 100.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      # from: Finger for first symbol of the bigram
      # to: Finger for second symbol of the bigram
      # cost: Cost to count for such a movement
      finger_switch_factor:
        - { from: [Left, Pinky],   to: [Left, Ring],    cost: 4 }
        - { from: [Left, Pinky],   to: [Left, Middle],  cost: 2 }

        - { from: [Left, Ring],    to: [Left, Pinky],   cost: 6 }
        - { from: [Left, Ring],    to: [Left, Middle],  cost: 2 }
        - { from: [Left, Ring],    to: [Left, Index], cost: 0.1 }

        - { from: [Left, Middle],  to: [Left, Pinky],   cost: 3 }
        - { from: [Left, Middle],  to: [Left, Ring],    cost: 5 }
        - { from: [Left, Middle],  to: [Left, Index], cost: 0.6 }

        - { from: [Left, Index], to: [Left, Pinky],   cost: 0.1 }
        - { from: [Left, Index], to: [Left, Ring],    cost: 0.3 }
        - { from: [Left, Index], to: [Left, Middle],  cost: 0.9 }

        - { from: [Right, Pinky],   to: [Right, Ring],    cost: 4 }
        - { from: [Right, Pinky],   to: [Right, Middle],  cost: 2 }

        - { from: [Right, Ring],    to: [Right, Pinky],   cost: 6 }
        - { from: [Right, Ring],    to: [Right, Middle],  cost: 2 }
        - { from: [Right, Ring],    to: [Right, Index], cost: 0.1 }

        - { from: [Right, Middle],  to: [Right, Pinky],   cost: 3 }
        - { from: [Right, Middle],  to: [Right, Ring],    cost: 5 }
        - { from: [Right, Middle],  to: [Right, Index], cost: 0.6 }

        - { from: [Right, Index], to: [Right, Pinky],   cost: 0.1 }
        - { from: [Right, Index], to: [Right, Ring],    cost: 0.3 }
        - { from: [Right, Index], to: [Right, Middle],  cost: 0.9 }

      # Finger lengths
      # not really relevant
      finger_lengths:
        Left:
          Pinky: 2
          Ring: 3
          Middle: 3
          Index: 3
        Right:
          Pinky: 2
          Ring: 3
          Middle: 3
          Index: 3

      # If the movement is directed downwards from a short towards a long
      # or upwards from a long towards a short finger,
      # the cost is multiplied by this factor
      short_down_to_long_or_long_up_to_short_factor: 2.0

        # rows and columns aren't real (your fingers never move over a key, other than center, and measuring that would be.. hard
      same_row_offset: 0
      lateral_stretch_factor: 0.0

      # If the movement involves unbalancing keys (horizontally or vertically), the corresponding
      # unbalancing values are weighted with this factor and multiplied to the result.
      unbalancing_factor: 0.5

  # If no handswitch occurs after hitting an "unbalancing" key (as defined in the keyboard's layout
  # config), a cost is counted depending on how far the unbalancing takes place.
  no_handswitch_after_unbalancing_key:
    enabled: true
      # this probably could be a lot lower, however, it makes it more fun to type on soo
    weight: 80.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      null: null


  # trigram metrics

  # The `irregularity` metric evaluates all bigram metrics that can be computed on individual
  # bigrams (in particular not the finger- and hand-balance metrics) for the first and second half
  # of each trigram. Their cost is multiplied and the square root of the resulting sum is taken.
  irregularity:
    enabled: true
    weight: 8.25
    normalization:
      type: weight_found
      value: 1.0
    params:
      null: null

  # If there is no handswitch in a trigram, a cost is counted. The cost is multiplied by factors
  # depending on whether the three keys corresponding to the trigram are "in line" ("rolling
  # movement") or if there is a directional change.
  no_handswitch_in_trigram:
    enabled: true
    weight: 300.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      # Count this factor if there is a direction change in the trigram
      factor_with_direction_change: 2.0
      # Count this factor if there is no direction change in the trigram
      factor_without_direction_change: 1.0
      # Count this factor if all characters of the trigram lie on the same key
        # THIS IS IMPORTANT ON THE SVAL
      factor_same_key: 3.0
      # Count this factor if the trigram contains at least finger repeats
      factor_contains_finger_repeat: 2.0
      # Count this factor if the starting and end key are the same (but no finger repeat)
      factor_same_key_start_end: 0.5
      # The trigram contains the index finger at least once
      factor_contains_index: 0.5

  # The `secondary_bigrams` metric evaluates all bigram metrics that can be computed on individual
  # bigrams (in particular not the finger- and hand-balance metrics) for the bigram resulting from
  # the first and last symbol of the trigram. Depending on whether the trigram involves a
  # handswitch or not, factors are applied. Trigrams starting with one of a list of specified
  # symbols are excluded.
  secondary_bigrams:
    enabled: true
    weight: 0.1
    normalization:
      type: weight_found
      value: 1.0
    params:
      # Multiply the cost with this factor if no handswitch occurs in the trigram
      factor_no_handswitch: 0.7
      # Multiply the cost with this factor if a handswitch occurs in the trigram
      factor_handswitch: 0.8
      # Mental pauses:
      # Exclude the trirgrams which contain a mental pause and a follow up with a non-pause symbol.
      # These trigrams do not need to be optimized, because they're "designed" to contain a pause.
      # Mental pauses start with one of the defined `initial_pause_indicators` and then contain
      # some kind of whitespace.
      initial_pause_indicators: [",", ".", ":", ";"]

  # If all keys corresponding to a trigram are hit by the same finger (and are all unequal), a cost
  # is counted. A factor is multiplied for each bigram with keys belonging to different columns.
  trigram_finger_repeats:
    enabled: true
    weight: 100000.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      # Multiply by this factor for each of the bigrams that have a lateral movement
      factor_lateral_movement: 1.2

  trigram_rolls:
    enabled: true
    weight: 3000.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      # Multiply by this factor for each of the bigrams that have a lateral movement
      factor_inward: 1.0
      factor_outward: 0.2
      exclude_rows: [0,1]

  oxey_inward_rolls:
    enabled: true
    weight: -2.0
    normalization:
      type: weight_all
      value: 0.01
    params:
      exclude_thumbs: true
      exclude_modifiers: true
      exclude_chars: ["\n"]

  oxey_outward_rolls:
    enabled: true
    weight: -1.0
    normalization:
      type: weight_all
      value: 0.01
    params:
      exclude_thumbs: true
      exclude_modifiers: true
      exclude_chars: ["\n"]

ngrams:
  # Increase the weight of bigrams that have both an absolute weight and relative weight exceed
  # specified thresholds.
  increase_common_ngrams:
    enabled: true
    # Bigrams with a relative weight exceeding this threshold are considered
    critical_fraction: 0.001
    # The weight for bigrams exceeding both thresholds is multiplied by this factor
    factor: 2.0
    # Bigrams with an absolute weight exceeding this threshold are considered
    total_weight_threshold: 20.0


ngram_mapper:
  # Exclude ngrams that contain a line break, followed by a non-line-break character.
  # This encodes a mental pause which usually comes after hitting the "Enter" key, before
  # continuing to write.
  exclude_line_breaks: true

  # Split symbols belonging to higher layers of the layout into combinations involving modifiers
  # required to activate the layer
  split_modifiers:
    enabled: true
    # Multiply the ngram's weight with this factor whenever the resulting ngram involves two
    # modifiers that are required for the same symbol
    same_key_mod_factor: 0.03125
